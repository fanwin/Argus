# 开发环境专用Dockerfile
# 支持热重载、调试和开发工具

# 基础镜像
FROM python:3.10-slim as base

# 设置环境变量
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# 创建开发用户
RUN groupadd --gid 1000 developer \
    && useradd --uid 1000 --gid developer --shell /bin/bash --create-home developer

# 安装系统依赖和开发工具
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget \
    curl \
    git \
    vim \
    nano \
    htop \
    tree \
    jq \
    unzip \
    build-essential \
    gcc \
    g++ \
    make \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 开发工具阶段
FROM base as dev-tools

# 安装Node.js（用于前端工具）
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# 安装开发Python包
RUN pip install --no-cache-dir \
    jupyter \
    jupyterlab \
    ipython \
    notebook \
    debugpy \
    pytest-xdist \
    pytest-cov \
    pytest-html \
    pytest-mock \
    flake8 \
    pylint \
    black \
    isort \
    bandit \
    safety \
    pre-commit \
    sphinx \
    sphinx-rtd-theme

# 设置工作目录
WORKDIR /app

# 暴露端口
EXPOSE 8888 8080

# 代码质量检查阶段
FROM dev-tools as code-quality

# 安装额外的代码质量工具
RUN pip install --no-cache-dir \
    mypy \
    coverage \
    pytest-benchmark \
    radon \
    xenon \
    vulture

# 开发环境阶段
FROM base as development

# 安装浏览器和驱动（开发环境需要）
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        google-chrome-stable \
        firefox-esr \
        xvfb \
        x11vnc \
        fluxbox \
        wmctrl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 安装驱动程序
RUN CHROME_DRIVER_VERSION=119.0.6045.105 \
    && wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip \
    && unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/ \
    && rm /tmp/chromedriver.zip \
    && chmod +x /usr/local/bin/chromedriver

RUN GECKO_DRIVER_VERSION=v0.33.0 \
    && wget -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/$GECKO_DRIVER_VERSION/geckodriver-$GECKO_DRIVER_VERSION-linux64.tar.gz \
    && tar -xzf /tmp/geckodriver.tar.gz -C /usr/local/bin/ \
    && rm /tmp/geckodriver.tar.gz \
    && chmod +x /usr/local/bin/geckodriver

# 安装开发Python依赖
COPY requirements.txt /tmp/requirements.txt
COPY requirements-dev.txt /tmp/requirements-dev.txt

RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r /tmp/requirements.txt \
    && pip install --no-cache-dir -r /tmp/requirements-dev.txt \
    && rm /tmp/requirements*.txt

# 设置工作目录
WORKDIR /app

# 创建必要的目录
RUN mkdir -p /app/reports/allure-results \
    && mkdir -p /app/reports/screenshots \
    && mkdir -p /app/reports/coverage \
    && mkdir -p /app/reports/logs \
    && mkdir -p /app/.cache \
    && chown -R developer:developer /app

# 设置显示环境变量
ENV DISPLAY=:99

# 创建开发环境启动脚本
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# 启动虚拟显示（如果需要）\n\
if [ "$HEADLESS" != "true" ]; then\n\
    echo "Starting Xvfb for GUI debugging..."\n\
    Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &\n\
    XVFB_PID=$!\n\
    \n\
    # 启动VNC服务器（用于远程调试）\n\
    x11vnc -display :99 -nopw -listen localhost -xkb &\n\
    VNC_PID=$!\n\
    \n\
    # 启动窗口管理器\n\
    fluxbox &\n\
    FLUXBOX_PID=$!\n\
    \n\
    # 等待X服务器启动\n\
    for i in {1..10}; do\n\
        if xdpyinfo -display :99 >/dev/null 2>&1; then\n\
            echo "X server is ready"\n\
            break\n\
        fi\n\
        echo "Waiting for X server... ($i/10)"\n\
        sleep 1\n\
    done\n\
fi\n\
\n\
# 安装开发依赖（如果有新的）\n\
if [ -f "requirements-dev.txt" ]; then\n\
    pip install -r requirements-dev.txt\n\
fi\n\
\n\
# 设置pre-commit hooks\n\
if [ -f ".pre-commit-config.yaml" ]; then\n\
    pre-commit install\n\
fi\n\
\n\
# 清理函数\n\
cleanup() {\n\
    echo "Cleaning up..."\n\
    [ ! -z "$FLUXBOX_PID" ] && kill $FLUXBOX_PID 2>/dev/null || true\n\
    [ ! -z "$VNC_PID" ] && kill $VNC_PID 2>/dev/null || true\n\
    [ ! -z "$XVFB_PID" ] && kill $XVFB_PID 2>/dev/null || true\n\
    exit 0\n\
}\n\
\n\
# 设置信号处理\n\
trap cleanup SIGTERM SIGINT\n\
\n\
# 执行传入的命令\n\
echo "Executing command: $@"\n\
exec "$@"' > /usr/local/bin/dev-entrypoint.sh \
    && chmod +x /usr/local/bin/dev-entrypoint.sh

# 切换到开发用户
USER developer

# 设置入口点
ENTRYPOINT ["/usr/local/bin/dev-entrypoint.sh"]

# 默认命令（开发模式）
CMD ["python", "-m", "pytest", "--tb=short", "-v"]

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys, os; sys.exit(0 if os.path.exists('/app') else 1)" || exit 1

# 标签
LABEL maintainer="argus-dev-team@example.com"
LABEL version="2.0-dev"
LABEL description="Argus Testing Framework - Development Environment"
LABEL environment="development"

# 暴露开发端口
EXPOSE 8000 5678 5900
