# 安全强化的Dockerfile
# 遵循Docker安全最佳实践

# 使用官方基础镜像并指定具体版本
FROM python:3.10.12-slim-bullseye as base

# 设置标签
LABEL maintainer="argus-security-team@example.com"
LABEL version="2.0-secure"
LABEL description="Argus Testing Framework - Security Hardened"
LABEL security.scan="enabled"

# 安全环境变量
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PIP_NO_ROOT_USER_ACTION=ignore

# 创建非特权用户
RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser \
    && mkdir -p /app /app/reports /app/logs \
    && chown -R appuser:appuser /app

# 安全系统更新和依赖安装
RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends \
        ca-certificates=20210119 \
        wget=1.21-1+deb11u1 \
        curl=7.74.0-1.3+deb11u7 \
        gnupg2=2.2.27-2+deb11u2 \
        unzip=6.0-26+deb11u1 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# 浏览器安装阶段
FROM base as browser-stage

# 安装Chrome浏览器（安全版本）
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
        google-chrome-stable=119.0.6045.105-1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 安装Firefox浏览器
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        firefox-esr=78.15.0esr-1~deb11u1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 安装虚拟显示工具
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        xvfb=2:1.20.11-1+deb11u4 \
        x11vnc=0.9.16-1 \
        fluxbox=1.3.7-1 \
        wmctrl=1.07-7+b1 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 驱动程序安装阶段
FROM browser-stage as driver-stage

# 安装ChromeDriver（固定安全版本）
RUN CHROME_DRIVER_VERSION=119.0.6045.105 \
    && wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip \
    && echo "a1b2c3d4e5f6... /tmp/chromedriver.zip" | sha256sum -c - \
    && unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/ \
    && rm /tmp/chromedriver.zip \
    && chmod 755 /usr/local/bin/chromedriver \
    && chown root:root /usr/local/bin/chromedriver

# 安装GeckoDriver（固定安全版本）
RUN GECKO_DRIVER_VERSION=v0.33.0 \
    && wget -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/$GECKO_DRIVER_VERSION/geckodriver-$GECKO_DRIVER_VERSION-linux64.tar.gz \
    && echo "b1c2d3e4f5g6... /tmp/geckodriver.tar.gz" | sha256sum -c - \
    && tar -xzf /tmp/geckodriver.tar.gz -C /usr/local/bin/ \
    && rm /tmp/geckodriver.tar.gz \
    && chmod 755 /usr/local/bin/geckodriver \
    && chown root:root /usr/local/bin/geckodriver

# Python依赖阶段
FROM driver-stage as python-deps

# 升级pip到安全版本
RUN pip install --no-cache-dir --upgrade pip==23.2.1

# 复制并验证requirements文件
COPY --chown=appuser:appuser requirements.txt /tmp/requirements.txt

# 安全地安装Python依赖
RUN pip install --no-cache-dir --require-hashes -r /tmp/requirements.txt \
    && rm /tmp/requirements.txt

# 生产环境阶段
FROM python-deps as production

# 设置工作目录
WORKDIR /app

# 复制应用代码（仅必要文件）
COPY --chown=appuser:appuser test_framework.py ./
COPY --chown=appuser:appuser utilities/ ./utilities/
COPY --chown=appuser:appuser page_objects/ ./page_objects/
COPY --chown=appuser:appuser fixtures/ ./fixtures/
COPY --chown=appuser:appuser tests/ ./tests/
COPY --chown=appuser:appuser pytest.ini ./

# 创建安全的启动脚本
RUN echo '#!/bin/bash\n\
set -euo pipefail\n\
\n\
# 安全检查\n\
if [ "$(id -u)" = "0" ]; then\n\
    echo "ERROR: Running as root is not allowed"\n\
    exit 1\n\
fi\n\
\n\
# 环境验证\n\
if [ -z "${PYTHONPATH:-}" ]; then\n\
    echo "ERROR: PYTHONPATH not set"\n\
    exit 1\n\
fi\n\
\n\
# 启动虚拟显示（如果需要）\n\
if [ "${HEADLESS:-true}" = "false" ]; then\n\
    echo "Starting Xvfb..."\n\
    Xvfb :99 -screen 0 1920x1080x24 -ac +extension GLX +render -noreset &\n\
    XVFB_PID=$!\n\
    \n\
    # 等待X服务器启动\n\
    for i in {1..10}; do\n\
        if xdpyinfo -display :99 >/dev/null 2>&1; then\n\
            echo "X server is ready"\n\
            break\n\
        fi\n\
        sleep 1\n\
    done\n\
fi\n\
\n\
# 清理函数\n\
cleanup() {\n\
    echo "Cleaning up..."\n\
    [ ! -z "${XVFB_PID:-}" ] && kill $XVFB_PID 2>/dev/null || true\n\
    exit 0\n\
}\n\
\n\
# 信号处理\n\
trap cleanup SIGTERM SIGINT\n\
\n\
# 执行命令\n\
exec "$@"' > /usr/local/bin/secure-entrypoint.sh \
    && chmod 755 /usr/local/bin/secure-entrypoint.sh \
    && chown root:root /usr/local/bin/secure-entrypoint.sh

# 移除不必要的包和文件
RUN apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf /root/.cache \
    && find /usr/local -name "*.pyc" -delete \
    && find /usr/local -name "__pycache__" -delete

# 设置安全权限
RUN chmod -R 755 /app \
    && chmod -R 644 /app/*.py /app/*/*.py \
    && chmod 755 /app/utilities /app/page_objects /app/fixtures /app/tests \
    && chown -R appuser:appuser /app

# 切换到非特权用户
USER appuser

# 设置安全的环境变量
ENV DISPLAY=:99
ENV HOME=/home/appuser
ENV PATH=/usr/local/bin:/usr/bin:/bin

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import sys, os; sys.exit(0 if os.path.exists('/app/test_framework.py') else 1)" || exit 1

# 设置入口点
ENTRYPOINT ["/usr/local/bin/secure-entrypoint.sh"]

# 默认命令
CMD ["python", "test_framework.py"]

# 暴露端口（仅内部使用）
EXPOSE 8000

# 安全标签
LABEL security.non-root="true"
LABEL security.readonly-rootfs="true"
LABEL security.no-new-privileges="true"
