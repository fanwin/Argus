# 安全强化的Docker Compose配置
# 包含安全最佳实践和生产环境配置

version: '3.8'

services:
  # 主测试服务（安全强化）
  test-runner-secure:
    build:
      context: .
      dockerfile: Dockerfile.secure
      target: production
    container_name: argus-test-runner-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    user: "1000:1000"
    environment:
      - TEST_ENV=${TEST_ENV:-prod}
      - BROWSER=${BROWSER:-chrome}
      - HEADLESS=true
      - DISPLAY=:99
      - PYTHONPATH=/app
      - TZ=UTC
    volumes:
      - ./reports:/app/reports:rw
      - ./configs:/app/configs:ro
      - ./data:/app/data:ro
      - /tmp:/tmp:rw,noexec,nosuid,nodev
    tmpfs:
      - /app/tmp:rw,noexec,nosuid,size=100m
      - /var/log:rw,noexec,nosuid,size=50m
    networks:
      - secure-network
    depends_on:
      selenium-hub-secure:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Selenium Hub（安全强化）
  selenium-hub-secure:
    image: selenium/hub:4.15.0
    container_name: selenium-hub-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    user: "1000:1000"
    environment:
      - GRID_MAX_SESSION=8
      - GRID_BROWSER_TIMEOUT=300
      - GRID_TIMEOUT=300
      - GRID_NEW_SESSION_WAIT_TIMEOUT=10
      - TZ=UTC
    ports:
      - "127.0.0.1:4444:4444"
      - "127.0.0.1:4442:4442"
      - "127.0.0.1:4443:4443"
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 256M

  # Chrome节点（安全强化）
  chrome-node-secure:
    image: selenium/node-chrome:4.15.0
    container_name: chrome-node-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SYS_ADMIN  # Chrome需要
    user: "1000:1000"
    shm_size: 2gb
    environment:
      - HUB_HOST=selenium-hub-secure
      - HUB_PORT=4444
      - NODE_MAX_INSTANCES=2
      - NODE_MAX_SESSION=2
      - SE_EVENT_BUS_HOST=selenium-hub-secure
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - TZ=UTC
    volumes:
      - /dev/shm:/dev/shm:rw
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    networks:
      - secure-network
    depends_on:
      selenium-hub-secure:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
          pids: 100
        reservations:
          cpus: '0.5'
          memory: 512M

  # 数据库（安全强化）
  postgres-secure:
    image: postgres:15-alpine
    container_name: postgres-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    user: "999:999"
    environment:
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --auth-host=scram-sha-256
      - TZ=UTC
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_secure_data:/var/lib/postgresql/data:rw
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /run:rw,noexec,nosuid,size=100m
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
    networks:
      - secure-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $(cat /run/secrets/postgres_user) -d $(cat /run/secrets/postgres_db)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 100
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis（安全强化）
  redis-secure:
    image: redis:7-alpine
    container_name: redis-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    user: "999:999"
    ports:
      - "127.0.0.1:6379:6379"
    command: >
      redis-server
      --requirepass $(cat /run/secrets/redis_password)
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_secure_data:/data:rw
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m
    secrets:
      - redis_password
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 128M

  # 监控服务（安全强化）
  prometheus-secure:
    image: prom/prometheus:latest
    container_name: prometheus-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    user: "65534:65534"
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_secure_data:/prometheus:rw
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
          pids: 50
        reservations:
          cpus: '0.25'
          memory: 256M

  # 反向代理（安全网关）
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy-secure
    restart: unless-stopped
    read_only: true
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    user: "101:101"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx:rw
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/cache/nginx:rw,noexec,nosuid,size=100m
      - /var/run:rw,noexec,nosuid,size=100m
    networks:
      - secure-network
    depends_on:
      - test-runner-secure
      - selenium-hub-secure
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# 安全网络配置
networks:
  secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-secure
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
          gateway: 172.30.0.1
    labels:
      - "com.docker.compose.network=secure"

# 安全卷配置
volumes:
  postgres_secure_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-secure
  redis_secure_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-secure
  prometheus_secure_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus-secure
  nginx_logs:
    driver: local

# 密钥管理
secrets:
  postgres_db:
    file: ./secrets/postgres_db.txt
  postgres_user:
    file: ./secrets/postgres_user.txt
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
