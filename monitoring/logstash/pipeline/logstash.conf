# Logstash配置文件
# 用于处理Docker容器日志

input {
  # 从Beats接收日志
  beats {
    port => 5044
  }
  
  # 从Docker日志驱动接收日志
  tcp {
    port => 5000
    codec => json_lines
  }
  
  # 从文件读取日志
  file {
    path => "/var/log/containers/*.log"
    start_position => "beginning"
    codec => json
  }
}

filter {
  # 解析Docker容器日志
  if [docker] {
    mutate {
      add_field => { "log_source" => "docker" }
    }
    
    # 解析容器名称
    if [docker][container_name] {
      mutate {
        add_field => { "container_name" => "%{[docker][container_name]}" }
      }
    }
    
    # 解析镜像名称
    if [docker][image] {
      mutate {
        add_field => { "image_name" => "%{[docker][image]}" }
      }
    }
  }
  
  # 解析测试框架日志
  if [container_name] =~ /test-runner/ {
    mutate {
      add_field => { "log_type" => "test_execution" }
    }
    
    # 解析pytest日志
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" }
    }
    
    # 解析测试结果
    if [log_message] =~ /PASSED|FAILED|SKIPPED/ {
      grok {
        match => { "log_message" => "(?<test_file>[^:]+)::(?<test_class>[^:]+)::(?<test_method>[^\\s]+)\\s+(?<test_result>PASSED|FAILED|SKIPPED)" }
      }
      
      mutate {
        add_field => { "log_type" => "test_result" }
      }
    }
  }
  
  # 解析Selenium Hub日志
  if [container_name] =~ /selenium-hub/ {
    mutate {
      add_field => { "log_type" => "selenium_hub" }
    }
    
    # 解析会话信息
    grok {
      match => { "message" => "Session (?<session_id>[a-f0-9-]+) (?<session_action>created|terminated)" }
    }
  }
  
  # 解析浏览器节点日志
  if [container_name] =~ /(chrome|firefox|edge)-node/ {
    mutate {
      add_field => { "log_type" => "browser_node" }
    }
    
    # 提取浏览器类型
    grok {
      match => { "container_name" => "(?<browser_type>chrome|firefox|edge)-node" }
    }
  }
  
  # 解析数据库日志
  if [container_name] =~ /postgres/ {
    mutate {
      add_field => { "log_type" => "database" }
    }
    
    # 解析SQL查询
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \\[%{NUMBER:pid}\\] %{WORD:level}: %{GREEDYDATA:sql_message}" }
    }
  }
  
  # 解析Redis日志
  if [container_name] =~ /redis/ {
    mutate {
      add_field => { "log_type" => "cache" }
    }
  }
  
  # 解析错误和警告
  if [message] =~ /(?i)error|exception|fail/ {
    mutate {
      add_field => { "severity" => "error" }
    }
  } else if [message] =~ /(?i)warn/ {
    mutate {
      add_field => { "severity" => "warning" }
    }
  } else {
    mutate {
      add_field => { "severity" => "info" }
    }
  }
  
  # 添加时间戳
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # 清理字段
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "log" ]
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "docker-logs-%{+YYYY.MM.dd}"
    template_name => "docker-logs"
    template_pattern => "docker-logs-*"
    template => {
      "index_patterns" => ["docker-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "container_name" => { "type" => "keyword" }
          "image_name" => { "type" => "keyword" }
          "log_type" => { "type" => "keyword" }
          "severity" => { "type" => "keyword" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "test_file" => { "type" => "keyword" }
          "test_class" => { "type" => "keyword" }
          "test_method" => { "type" => "keyword" }
          "test_result" => { "type" => "keyword" }
          "session_id" => { "type" => "keyword" }
          "browser_type" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # 调试输出（可选）
  # stdout {
  #   codec => rubydebug
  # }
}
